TODO. 根据自定义Node节点类型，完整定义比较的三种结果
PriorityQueue<QueueNode> queue = new PriorityQueue<>(new Comparator<QueueNode>() {
    @Override
    public int compare(QueueNode o1, QueueNode o2) {
        if (o1.units < o2.units) {
            return 1;
        } else if (o1.units > o2.units) {
            return -1;
        }
        return 0;
    }
});


PriorityQueue<Integer> small = new PriorityQueue<>(Collections.reverseOrder());

TODO. 根据队列存储的类型，选择特定的数据进行比较
HashMap<Integer, Integer> results = new HashMap<>();
Queue<Integer> heap = new PriorityQueue<>(Comparator.comparingInt(results::get));
for (int n : results.keySet()) {
     heap.add(n);
}

PriorityQueue<int[]> priorityQueue = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
for (int x : nums1) {
     priorityQueue.offer(new int[]{x, 0});
}

// Comparator.comparingInt() 源码完整的三种比较结果
public static int compare(int x, int y) {
        return (x < y) ? -1 : ((x == y) ? 0 : 1);
}