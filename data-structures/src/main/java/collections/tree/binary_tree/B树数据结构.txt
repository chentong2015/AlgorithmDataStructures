TODO. B-Tree:
控制树的高度，存储大量的数据
一个结点上存储更多的元素，其中每个node存(key,value)
所有索引元素不重复，结点中的数据索引从左到右递增
由于在叶子结点之间没有指针链接，因此不支持范围的查找

TODO. B+Tree:
1. 上层的key构成的一组结点，从左到右依次递增，左子树都小，右子树都大
2. 提取叶子结点的一组元素中的第一个值(冗余值)，构成第二层
3. 叶子结点具有指针的连接，从左到右递增，支持对范围的查找
4. 叶子结点包含整张表的所有索引元素，data是索引所在行的磁盘文件地址

B+Tree如何查找 ?
为了提高查询的效率，一般页(根结点)是常驻内存的
1. 首先将整个root根结点load到内存中RAM(访问延时约100ns)，使用二分法查找(根结点中key是排序的)
2. 再加载左结点到内存中，二分法查找
3. 再加载第三层的叶子结点数据

B+Tree为什么能使树的高度可控 ?
1. 默认给Page页分配的大小是16KB
   查询语句：Show global status like 'Innodb_page_size'; 查找页的大小设置
   8bits + 6bits@address + 8bits + 6bits@address ....  总共可以存1100个key值
2. 第二层单个页可以放1170个key值
3. 第三层单个页可以放16个(key, value)组合值
   全部放满叶子结点：1100 * 1100 * 16 = 千万级的key值 ===> 再往上则需要做分库分表 !!