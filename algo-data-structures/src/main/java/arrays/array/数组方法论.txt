Array 静态数组: 存放相同类型的一组数据
1. 存储量(长度)固定
2. 查找元素速度快(根据index下标访问)
3. 中间插入元素慢(需要移动后面的元素)

TODO: 数组方法论: 数组问题的最优解
1. 直接利用数组位置替换，前端和尾部可以定位存放特征值，覆盖值或者交换位置
2. 直接利用数组本身来对数据进行统计，利用index差来计算
3. 数组值的范围在Length长度之内，可将值的判断转换到Index坐标上计算
4. 利用数组[1,,N]的Index坐标序号，用于计算连续缺失的Value正整数

5. 遍历两遍数组，第一遍查找关键信息(找特殊情况下的特征)，第二遍得出结果(再找一般性)
6. 使用双指针算法，两个标识left和right，从左右两端往中间遍历，移动速度可采用不同的策略
7. 遍历时使用一两个变量记录历史关键信息(DP算法)，避免使用额外数据结构
8. 使用Arrays.sort()排序，直接简化复杂问题
9. 使用HashSet<>判断key值重复，HashMap<>统计key值出现频率

10. SubArray子数组表示的是连续的数组片段，数据必须连续，不能对数组进行排序 ！！


return new int[] {item1, item2, ...}  返回数据，需要将数组构建出来
return Arrays.copyOf(results, count); 从起始点截取指定的长度
return Arrays.copyOfRange(results, 0, count); 定位截取指定区间的数据, 复制到count前一个位置
System.arraycopy(digits, 0, results, 1, digits.length); 从原始数组copy指定长度到目标数组
