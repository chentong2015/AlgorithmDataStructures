return new int[] {item1, item2, ...} 直接将数组构建出来

Arrays.copyOf(results, count); 从起始点截取指定的长度
Arrays.copyOfRange(results, 0, count); 定位截取指定区间的数据, 复制到count前一个位置
System.arraycopy(digits, 0, results, 1, digits.length); 从原始数组copy指定长度到目标数组

Arrays.asList(nums);   将数组转换成List列表
Arrays.asList(1,2,3);  直接通过值生成List列表

TODO. 一维数组自然排序
int[] nums;
Arrays.sort(nums);

TODO. 二维数组自然排序，比较特定位置的值或者同时比较
int[][] nums;
Arrays.sort(nums, Comparator.comparingInt(m -> m[0]));
Arrays.sort(meetings, (a, b) -> a[0] - b[0]);
Arrays.sort(envelopes, (arr1, arr2) -> {
    if (arr1[0] == arr2[0]) {
        return arr2[1] - arr1[1];
    } else {
        return arr1[0] - arr2[0];
    }
});

TODO. 二分搜索结果的index范围
 if index >=0; [0, length - 1]
 if index < 0; [0, length]
    恢复(-(insertion point) - 1)插入位置, 得到闭合区间
int[] nums = {1, 5, 6, 8};
Arrays.binarySearch(nums, 0, nums.length, 1); -> 0
Arrays.binarySearch(nums, 0, nums.length, 3); -> -2 恢复成中间的插入坐标 1
Arrays.binarySearch(nums, 0, nums.length, 10); -> -5 插入的坐标位置在最后 4